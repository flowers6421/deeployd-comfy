// Generated by dts-bundle-generator v9.5.1

import { LGraph } from 'litegraph.js';
import { z } from 'zod';

declare const snapshotType: z.ZodObject<{
	comfyui: z.ZodString;
	git_custom_nodes: z.ZodRecord<z.ZodString, z.ZodObject<{
		hash: z.ZodString;
		disabled: z.ZodBoolean;
	}, "strip", z.ZodTypeAny, {
		hash: string;
		disabled: boolean;
	}, {
		hash: string;
		disabled: boolean;
	}>>;
	file_custom_nodes: z.ZodArray<z.ZodAny, "many">;
}, "strip", z.ZodTypeAny, {
	comfyui: string;
	git_custom_nodes: Record<string, {
		hash: string;
		disabled: boolean;
	}>;
	file_custom_nodes: any[];
}, {
	comfyui: string;
	git_custom_nodes: Record<string, {
		hash: string;
		disabled: boolean;
	}>;
	file_custom_nodes: any[];
}>;
export declare const CustomNodesDepsType: z.ZodRecord<z.ZodString, z.ZodObject<{
	name: z.ZodString;
	node: z.ZodOptional<z.ZodArray<z.ZodObject<{
		inputs: z.ZodRecord<z.ZodString, z.ZodAny>;
		class_type: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		inputs: Record<string, any>;
		class_type?: string | undefined;
	}, {
		inputs: Record<string, any>;
		class_type?: string | undefined;
	}>, "many">>;
	hash: z.ZodOptional<z.ZodString>;
	url: z.ZodString;
	files: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
	install_type: z.ZodOptional<z.ZodUnion<[
		z.ZodEnum<[
			"copy",
			"unzip",
			"git-clone"
		]>,
		z.ZodString
	]>>;
	warning: z.ZodOptional<z.ZodString>;
	pip: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
	name: string;
	url: string;
	hash?: string | undefined;
	node?: {
		inputs: Record<string, any>;
		class_type?: string | undefined;
	}[] | undefined;
	files?: string[] | undefined;
	install_type?: string | undefined;
	warning?: string | undefined;
	pip?: string[] | undefined;
}, {
	name: string;
	url: string;
	hash?: string | undefined;
	node?: {
		inputs: Record<string, any>;
		class_type?: string | undefined;
	}[] | undefined;
	files?: string[] | undefined;
	install_type?: string | undefined;
	warning?: string | undefined;
	pip?: string[] | undefined;
}>>;
export declare const FileReferenceType: z.ZodObject<{
	name: z.ZodString;
	hash: z.ZodOptional<z.ZodString>;
	url: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	name: string;
	hash?: string | undefined;
	url?: string | undefined;
}, {
	name: string;
	hash?: string | undefined;
	url?: string | undefined;
}>;
declare const workflowAPIType: z.ZodRecord<z.ZodString, z.ZodObject<{
	inputs: z.ZodRecord<z.ZodString, z.ZodAny>;
	class_type: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
	inputs: Record<string, any>;
	class_type?: string | undefined;
}, {
	inputs: Record<string, any>;
	class_type?: string | undefined;
}>>;
declare const WorkflowJson: z.ZodObject<{
	last_node_id: z.ZodNumber;
	last_link_id: z.ZodNumber;
	nodes: z.ZodArray<z.ZodObject<{
		id: z.ZodNumber;
		type: z.ZodString;
		pos: z.ZodArray<z.ZodNumber, "many">;
		size: z.ZodAny;
		flags: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
		order: z.ZodNumber;
		mode: z.ZodNumber;
		inputs: z.ZodOptional<z.ZodArray<z.ZodObject<{
			name: z.ZodString;
			type: z.ZodString;
			link: z.ZodNullable<z.ZodNumber>;
			widget: z.ZodOptional<z.ZodObject<{
				name: z.ZodString;
			}, "strip", z.ZodTypeAny, {
				name: string;
			}, {
				name: string;
			}>>;
		}, "strip", z.ZodTypeAny, {
			type: string;
			name: string;
			link: number | null;
			widget?: {
				name: string;
			} | undefined;
		}, {
			type: string;
			name: string;
			link: number | null;
			widget?: {
				name: string;
			} | undefined;
		}>, "many">>;
		outputs: z.ZodOptional<z.ZodArray<z.ZodObject<{
			name: z.ZodString;
			type: z.ZodString;
			links: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
			shape: z.ZodOptional<z.ZodNumber>;
			slot_index: z.ZodOptional<z.ZodNumber>;
		}, "strip", z.ZodTypeAny, {
			type: string;
			name: string;
			links: number[] | null;
			shape?: number | undefined;
			slot_index?: number | undefined;
		}, {
			type: string;
			name: string;
			links: number[] | null;
			shape?: number | undefined;
			slot_index?: number | undefined;
		}>, "many">>;
		properties: z.ZodRecord<z.ZodString, z.ZodString>;
		widgets_values: z.ZodOptional<z.ZodArray<z.ZodUnion<[
			z.ZodNumber,
			z.ZodString
		]>, "many">>;
		color: z.ZodOptional<z.ZodString>;
		bgcolor: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		type: string;
		id: number;
		pos: number[];
		flags: {};
		order: number;
		mode: number;
		properties: Record<string, string>;
		widgets_values?: (string | number)[] | undefined;
		inputs?: {
			type: string;
			name: string;
			link: number | null;
			widget?: {
				name: string;
			} | undefined;
		}[] | undefined;
		size?: any;
		outputs?: {
			type: string;
			name: string;
			links: number[] | null;
			shape?: number | undefined;
			slot_index?: number | undefined;
		}[] | undefined;
		color?: string | undefined;
		bgcolor?: string | undefined;
	}, {
		type: string;
		id: number;
		pos: number[];
		flags: {};
		order: number;
		mode: number;
		properties: Record<string, string>;
		widgets_values?: (string | number)[] | undefined;
		inputs?: {
			type: string;
			name: string;
			link: number | null;
			widget?: {
				name: string;
			} | undefined;
		}[] | undefined;
		size?: any;
		outputs?: {
			type: string;
			name: string;
			links: number[] | null;
			shape?: number | undefined;
			slot_index?: number | undefined;
		}[] | undefined;
		color?: string | undefined;
		bgcolor?: string | undefined;
	}>, "many">;
	links: z.ZodArray<z.ZodAny, "many">;
	groups: z.ZodArray<z.ZodAny, "many">;
	config: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
	extra: z.ZodAny;
	version: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
	last_node_id: number;
	last_link_id: number;
	nodes: {
		type: string;
		id: number;
		pos: number[];
		flags: {};
		order: number;
		mode: number;
		properties: Record<string, string>;
		widgets_values?: (string | number)[] | undefined;
		inputs?: {
			type: string;
			name: string;
			link: number | null;
			widget?: {
				name: string;
			} | undefined;
		}[] | undefined;
		size?: any;
		outputs?: {
			type: string;
			name: string;
			links: number[] | null;
			shape?: number | undefined;
			slot_index?: number | undefined;
		}[] | undefined;
		color?: string | undefined;
		bgcolor?: string | undefined;
	}[];
	links: any[];
	groups: any[];
	config: {};
	version: number;
	extra?: any;
}, {
	last_node_id: number;
	last_link_id: number;
	nodes: {
		type: string;
		id: number;
		pos: number[];
		flags: {};
		order: number;
		mode: number;
		properties: Record<string, string>;
		widgets_values?: (string | number)[] | undefined;
		inputs?: {
			type: string;
			name: string;
			link: number | null;
			widget?: {
				name: string;
			} | undefined;
		}[] | undefined;
		size?: any;
		outputs?: {
			type: string;
			name: string;
			links: number[] | null;
			shape?: number | undefined;
			slot_index?: number | undefined;
		}[] | undefined;
		color?: string | undefined;
		bgcolor?: string | undefined;
	}[];
	links: any[];
	groups: any[];
	config: {};
	version: number;
	extra?: any;
}>;
export type WorkflowJsonType = z.infer<typeof WorkflowJson>;
export type ExtensionNodeMap = Record<string, [
	string[],
	{
		title: string;
		title_aux: string;
		nodename_pattern: string;
	}
]>;
export type WorkflowAPIType = z.infer<typeof workflowAPIType>;
export type SnapshotType = z.infer<typeof snapshotType>;
export type FileGroup = Record<string, z.infer<typeof FileReferenceType>[]>;
export declare const DependencyGraphType: z.ZodObject<{
	comfyui: z.ZodString;
	missing_nodes: z.ZodArray<z.ZodString, "many">;
	custom_nodes: z.ZodRecord<z.ZodString, z.ZodObject<{
		name: z.ZodString;
		node: z.ZodOptional<z.ZodArray<z.ZodObject<{
			inputs: z.ZodRecord<z.ZodString, z.ZodAny>;
			class_type: z.ZodOptional<z.ZodString>;
		}, "strip", z.ZodTypeAny, {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}, {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}>, "many">>;
		hash: z.ZodOptional<z.ZodString>;
		url: z.ZodString;
		files: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
		install_type: z.ZodOptional<z.ZodUnion<[
			z.ZodEnum<[
				"copy",
				"unzip",
				"git-clone"
			]>,
			z.ZodString
		]>>;
		warning: z.ZodOptional<z.ZodString>;
		pip: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
	}, "strip", z.ZodTypeAny, {
		name: string;
		url: string;
		hash?: string | undefined;
		node?: {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}[] | undefined;
		files?: string[] | undefined;
		install_type?: string | undefined;
		warning?: string | undefined;
		pip?: string[] | undefined;
	}, {
		name: string;
		url: string;
		hash?: string | undefined;
		node?: {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}[] | undefined;
		files?: string[] | undefined;
		install_type?: string | undefined;
		warning?: string | undefined;
		pip?: string[] | undefined;
	}>>;
	models: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		hash: z.ZodOptional<z.ZodString>;
		url: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}>, "many">>;
	files: z.ZodRecord<z.ZodString, z.ZodArray<z.ZodObject<{
		name: z.ZodString;
		hash: z.ZodOptional<z.ZodString>;
		url: z.ZodOptional<z.ZodString>;
	}, "strip", z.ZodTypeAny, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}>, "many">>;
}, "strip", z.ZodTypeAny, {
	comfyui: string;
	files: Record<string, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}[]>;
	models: Record<string, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}[]>;
	missing_nodes: string[];
	custom_nodes: Record<string, {
		name: string;
		url: string;
		hash?: string | undefined;
		node?: {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}[] | undefined;
		files?: string[] | undefined;
		install_type?: string | undefined;
		warning?: string | undefined;
		pip?: string[] | undefined;
	}>;
}, {
	comfyui: string;
	files: Record<string, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}[]>;
	models: Record<string, {
		name: string;
		hash?: string | undefined;
		url?: string | undefined;
	}[]>;
	missing_nodes: string[];
	custom_nodes: Record<string, {
		name: string;
		url: string;
		hash?: string | undefined;
		node?: {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}[] | undefined;
		files?: string[] | undefined;
		install_type?: string | undefined;
		warning?: string | undefined;
		pip?: string[] | undefined;
	}>;
}>;
export declare function generateDependencyGraph({ workflow_api, snapshot, computeFileHash, handleFileUpload, existingDependencies, cachedExtensionsMap, pullLatestHashIfMissing }: {
	workflow_api: WorkflowAPIType;
	snapshot?: SnapshotType;
	computeFileHash?: (path: string) => Promise<string | undefined>;
	handleFileUpload?: (path: string, hash: string, prevHash?: string) => Promise<string>;
	existingDependencies?: z.infer<typeof DependencyGraphType>;
	cachedExtensionsMap?: ExtensionNodeMap;
	pullLatestHashIfMissing?: boolean;
}): Promise<{
	comfyui: string | undefined;
	custom_nodes: Record<string, {
		name: string;
		url: string;
		hash?: string | undefined;
		node?: {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}[] | undefined;
		files?: string[] | undefined;
		install_type?: string | undefined;
		warning?: string | undefined;
		pip?: string[] | undefined;
	}>;
	missing_nodes: string[];
	models: FileGroup;
	files: FileGroup;
}>;
export declare function generateDependencyGraphJson({ workflow_json, snapshot, computeFileHash, handleFileUpload, existingDependencies, cachedExtensionsMap, pullLatestHashIfMissing }: {
	workflow_json: WorkflowJsonType;
	snapshot?: SnapshotType;
	computeFileHash?: (path: string) => Promise<string | undefined>;
	handleFileUpload?: (path: string, hash: string, prevHash?: string) => Promise<string>;
	existingDependencies?: z.infer<typeof DependencyGraphType>;
	cachedExtensionsMap?: ExtensionNodeMap;
	pullLatestHashIfMissing?: boolean;
}): Promise<{
	comfyui: string | undefined;
	custom_nodes: Record<string, {
		name: string;
		url: string;
		hash?: string | undefined;
		node?: {
			inputs: Record<string, any>;
			class_type?: string | undefined;
		}[] | undefined;
		files?: string[] | undefined;
		install_type?: string | undefined;
		warning?: string | undefined;
		pip?: string[] | undefined;
	}>;
	missing_nodes: string[];
	conflicting_nodes: Record<string, any>;
}>;
export declare function graphToPrompt(graph: LGraph): Promise<{
	workflow: import("litegraph.js").serializedLGraph<import("litegraph.js").SerializedLGraphNode<import("litegraph.js").LGraphNode>, [
		number,
		number,
		number,
		number,
		number,
		string
	], import("litegraph.js").SerializedLGraphGroup>;
	output: Record<string, any>;
}>;

export {};
